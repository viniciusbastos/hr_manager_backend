generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions", "relationJoins"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [uuid_ossp(map: "uuid-ossp")]
}

model User {
  id              String        @id @default(uuid())
  mat             String?       @unique @db.Char(8)
  name            String?
  posto           String?
  email           String?       @unique
  password        String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt  @default(now())
  role            Role        @default(USER)
  Appointment     Appointment[]
  Course          Course[]
  profile         Profile[]
  Sicknote        Sicknote[]
  Vacation        Vacation[]
  Profileunidade  Profileunidade[]
  AuditLog        AuditLog[]
  ProfileWeapons   ProfileWeapons[]

}

model Vacation {
  period      String?
  approved    Boolean?  @default(false)
  belongsToId String
  finishAt    DateTime?
  startAt     DateTime?
  year        Int
  month       Int
  id          String    @id @default(uuid())
  bioId       String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime @updatedAt @default(now())
  belongsTo   User      @relation(fields: [belongsToId], references: [id])
  bio         Bio?      @relation(fields: [bioId], references: [id])
}

model Sicknote {
  id          Int      @id @default(autoincrement())
  InitialDate DateTime
  Days        Int?
  Cid         String?
  DoctorName  String?
  Obs         String?
  belongsToId String
  bioId       String?
  crm         String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime @updatedAt @default(now())
  belongsTo   User     @relation(fields: [belongsToId], references: [id])
  bio         Bio?     @relation(fields: [bioId], references: [id])
}

model Profile {
  id           Int       @id @default(autoincrement())
  bio          String?
  photo        String?
  adress       String?
  neighborhood String?
  city         String?
  phone        String?
  state        String?
  cpf          String?
  serviceTime  DateTime? @db.Date
  workplace    String?
  belongsToId  String
  bithDate     DateTime? @db.Date
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt @default(now())
  belongsTo    User      @relation(fields: [belongsToId], references: [id])
}

model Course {
  id          Int      @id @default(autoincrement())
  InitialDate DateTime
  FinalDate   DateTime
  name        String?
  progress    Boolean  @default(false)
  belongsToId String
  bioId       String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime @updatedAt @default(now())
  belongsTo   User     @relation(fields: [belongsToId], references: [id])
  bio         Bio?     @relation(fields: [bioId], references: [id])
}

model Bio {
  id          String        @id @default(uuid())
  Number      Int?
  Year        Int?
  Month       Int?
  InitialDate DateTime   @db.Date
  FinalDate   DateTime   @db.Date
  name        String
  progress    Boolean    @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime @updatedAt @default(now())
  type        String?
  Course      Course[]
  Sicknote    Sicknote[]
  Vacation    Vacation[]
}

model Appointment {
  id                        Int                  @id @default(autoincrement())
  Date                      DateTime             @db.Date
  Service                   String
  progress                  Boolean              @default(false)
  belongsToId               String
  belongsToProffessionalsId Int?
  Specialities              String
  createdAt                 DateTime  @default(now())
  updatedAt                 DateTime @updatedAt @default(now())
  belongsTo                 User                 @relation(fields: [belongsToId], references: [id])
  belongsToProfessionals    HealthProfessionals? @relation(fields: [belongsToProffessionalsId], references: [id])
}

model HealthProfessionals {
  id           Int           @id @default(autoincrement())
  Service      String
  Specialities String[]
  BirthDate    DateTime      @db.Date
  Name         String
  createdAt    DateTime  @default(now())
  updatedAt DateTime @updatedAt @default(now())
  Appointment  Appointment[]
}

model Unidades {
  id              Int           @id @default(autoincrement())
  name            String?
  location        String? 
  cidades         String[]
  aisp            String[]
  risp            String? 
  createdAt    DateTime  @default(now())
  updatedAt DateTime @updatedAt @default(now())
  Profileunidade  Profileunidade[]
}

model Profileunidade {
  id           Int           @id @default(autoincrement())
  belongsToId               String
  belongsToUnidadeId        Int
  createdAt                 DateTime  @default(now())
  updatedAt                 DateTime @updatedAt @default(now())
  belongsTo                 User                 @relation(fields: [belongsToId], references: [id])
  belongsToUnidade          Unidades             @relation(fields: [belongsToUnidadeId], references: [id])

}

model AuditLog {
  id                       Int       @id @default(autoincrement())
  action                   String
  model                    String
  modelId                  Int
  belongsToId              String
  ipAdress                 String
  createdAt                DateTime  @default(now())
  updatedAt                DateTime @updatedAt @default(now())

  belongsTo                 User                 @relation(fields: [belongsToId], references: [id])
}

enum Role {
  USER
  ADMIN
  GUEST
}

model Weapons {
  id              Int           @id @default(autoincrement())
  model           String?
  type            Int?
  serialNumber    String?
  location        Int?
  status          Int?
  caliber         Int?
  createdAt    DateTime  @default(now())
  updatedAt DateTime @updatedAt @default(now())
  ProfileWeapons   ProfileWeapons[]
}


model ProfileWeapons {
  id                        Int                  @id @default(autoincrement())
  belongsToId               String
  belongsToWeaponsId        Int
  InitialDate               DateTime             @db.Date
  discharge                 Boolean              @default(false)
  createdAt                 DateTime  @default(now())
  updatedAt                 DateTime @updatedAt @default(now())
  belongsTo                 User                 @relation(fields: [belongsToId], references: [id])
  belongsToWeapons          Weapons              @relation(fields: [belongsToWeaponsId], references: [id])

}

model UploadedFile {
  id           Int      @id @default(autoincrement())
  fileName     String   // Generated unique filename
  originalName String   // Original filename
  mimetype     String   // MIME type of the file
  size         Int      // File size in bytes
  s3Key        String   // S3 object key
  s3Bucket     String   // S3 bucket name
  uploadedAt   DateTime @default(now())
  createdAt    DateTime  @default(now())
  updatedAt DateTime @updatedAt @default(now())
}

model WeaponType {
  id           Int      @id @default(autoincrement())
  type         String   // Generated unique filename
  createdAt    DateTime  @default(now())
  updatedAt DateTime @updatedAt @default(now())

}

model WeaponLocation {
  id           Int      @id @default(autoincrement())
  location     String   // Generated unique filename
  createdAt    DateTime  @default(now())
  updatedAt DateTime @updatedAt @default(now())

}

model WeaponStatus {
  id           Int      @id @default(autoincrement())
  Status       Status    @default(EM_CONDICOES_DE_USO) // Generated unique filename
  createdAt    DateTime  @default(now())
  updatedAt DateTime @updatedAt @default(now())

}

enum Status {
  EM_CONDICOES_DE_USO
  DEFEITO
  EM_MANUTENCAO
  INSERVIVEL
  DESTRUIDO
  DEVOLVIDO_AO_DAL
  EM_USO
  EM_REPARO
  EM_TRANSPORTE
  EM_ARMAZENAMENTO__NO_PAIOL
  EM_TESTE_DE_MANUTENCAO
  EM_INSTRUCAO
  NAO_LOCALIZADA
  EM_PERICIA
  A_DISPOSICAO_DA_JUSTICA


}

model WeaponCaliber {
  id           Int      @id @default(autoincrement())
  Caliber      Caliber    @default(CALIBRE_40) // Generated unique filename
  createdAt    DateTime  @default(now())
  updatedAt    DateTime @updatedAt @default(now())

}

enum Caliber {
  CALIBRE_9MM
  CALIBRE_45
  CALIBRE_40
  CALIBRE_357
  CALIBRE_38
  CALIBRE_380
  CALIBRE_9
  CALIBRE_762
  CALIBRE_556
  CALIBRE_765
  CALIBRE_50
  CALIBRE_22
  CALIBRE_223
  CALIBRE_30
  CALIBRE_20
  CALIBRE_12
}

model Drivers {
  id               Int      @id @default(autoincrement())
  matricula        String   @unique// Generated unique filename
  driverLicense    String   @unique
  category         String  
  licenseValidity  DateTime
  createdAt        DateTime  @default(now())
  updatedAt        DateTime @updatedAt @default(now())

}

model VacationPlan {
  id          Int      @id @default(autoincrement())
  mat         String
  optionOne   Int
  optionTwo   Int
  phone       String
  pelotao     Int?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime @updatedAt @default(now())
}

model Posto {
  id               Int      @id @default(autoincrement())
  nome             String    
  createdAt        DateTime  @default(now())
  updatedAt        DateTime @updatedAt @default(now())

}