generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions", "relationJoins"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [uuid_ossp(map: "uuid-ossp")]
}

model User {
  id             String           @id @default(uuid())
  mat            String?          @unique @db.Char(8)
  name           String
  createdAt      DateTime         @default(now())
  posto          String?
  email          String?          @unique
  password       String?
  role           Role             @default(USER)
  updatedAt      DateTime         @default(now()) @updatedAt
  AuditLog       AuditLog[]
  Course         Course[]
  profile        Profile[]
  ProfileWeapons ProfileWeapons[]
  Profileunidade Profileunidade[]
  Sicknote       Sicknote[]
  Vacation       Vacation[]
}

model Vacation {
  period      String?
  approved    Boolean?  @default(false)
  createdAt   DateTime  @default(now())
  belongsToId String
  finishAt    DateTime?
  startAt     DateTime?
  year        Int
  month       Int
  id          String    @id @default(uuid())
  bioId       String?
  updatedAt   DateTime  @default(now()) @updatedAt
  belongsTo   User      @relation(fields: [belongsToId], references: [id])
  bio         Bio?      @relation(fields: [bioId], references: [id])
}

model Sicknote {
  id          Int      @id @default(autoincrement())
  InitialDate DateTime
  Days        Int?
  Cid         String?
  Obs         String?
  createdAt   DateTime @default(now())
  belongsToId String
  bioId       String?
  DoctorName  String?
  crm         String?
  updatedAt   DateTime @default(now()) @updatedAt
  url         String?
  belongsTo   User     @relation(fields: [belongsToId], references: [id])
  bio         Bio?     @relation(fields: [bioId], references: [id])
}

model Profile {
  id           Int       @id @default(autoincrement())
  bio          String?
  photo        String?
  address      String
  neighborhood String?
  city         String?
  phone        String
  state        String?
  cpf          String?
  serviceTime  DateTime? @db.Date
  workplace    String?
  belongsToId  String
  bithDate     DateTime? @db.Date
  belongsTo    User      @relation(fields: [belongsToId], references: [id])
}

model Course {
  id          Int      @id @default(autoincrement())
  InitialDate DateTime
  FinalDate   DateTime
  name        String?
  progress    Boolean  @default(false)
  createdAt   DateTime @default(now())
  belongsToId String
  bioId       String?
  belongsTo   User     @relation(fields: [belongsToId], references: [id])
  bio         Bio?     @relation(fields: [bioId], references: [id])
}

model Bio {
  id          String     @id @default("nextval('\"Bio_id_seq\"'::regclass)")
  InitialDate DateTime   @db.Date
  FinalDate   DateTime   @db.Date
  name        String
  progress    Boolean    @default(false)
  createdAt   DateTime   @default(now())
  Month       Int?
  Number      Int?
  Year        Int?
  type        String?
  Course      Course[]
  Sicknote    Sicknote[]
  Vacation    Vacation[]
}

model HealthProfessionals {
  id           Int      @id @default(autoincrement())
  Service      String
  createdAt    DateTime @default(now())
  Specialities String[]
  BirthDate    DateTime @db.Date
  Name         String
}

model Unidades {
  id             Int              @id @default(autoincrement())
  name           String?
  location       String?
  cidades        String[]
  risp           String?
  aisp           String[]
  Profileunidade Profileunidade[]
}

model Profileunidade {
  id                 Int      @id @default(autoincrement())
  belongsToId        String
  belongsToUnidadeId Int
  belongsTo          User     @relation(fields: [belongsToId], references: [id])
  belongsToUnidade   Unidades @relation(fields: [belongsToUnidadeId], references: [id])
}

model AuditLog {
  id          Int       @id @default(autoincrement())
  action      String
  model       String
  modelId     Int
  belongsToId String
  createdAt   DateTime  @default(now())
  ipAdress    String
  updatedAt   DateTime? @default(now()) @updatedAt
  belongsTo   User      @relation(fields: [belongsToId], references: [id])
}

model Weapons {
  id           Int       @id @default(autoincrement())
  model        String?
  serialNumber String?
  createdAt    DateTime  @default(now())
  type         Int?
  location     Int?
  caliber      Int?
  status       Int?
  updatedAt    DateTime? @default(now()) @updatedAt
  brand        Int?
}

model ProfileWeapons {
  id                 Int       @id @default(autoincrement())
  belongsToId        String
  belongsToWeaponsId Int
  InitialDate        DateTime  @db.Date
  discharge          Boolean   @default(false)
  createdAt          DateTime  @default(now())
  updatedAt          DateTime? @default(now()) @updatedAt
  belongsTo          User      @relation(fields: [belongsToId], references: [id])
}

model WeaponType {
  id        Int      @id @default(autoincrement())
  type      String
  createdAt DateTime @default(now())
}

model WeaponLocation {
  id        Int      @id @default(autoincrement())
  location  String
  createdAt DateTime @default(now())
}

model WeaponStatus {
  id        Int      @id @default(autoincrement())
  Status    Status   @default(EM_CONDICOES_DE_USO)
  createdAt DateTime @default(now())
}

model WeaponCaliber {
  id        Int      @id @default(autoincrement())
  Caliber   Caliber  @default(CALIBRE_40)
  createdAt DateTime @default(now())
}

model Drivers {
  id              Int      @id @default(autoincrement())
  matricula       String   @unique
  driverLicense   String   @unique
  category        String
  licenseValidity DateTime
  createdAt       DateTime @default(now())
  updatedAt       DateTime @default(now()) @updatedAt
}

model VacationPlan {
  id        Int      @id @default(autoincrement())
  mat       String?
  optionOne Int?
  optionTwo Int?
  phone     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  pelotao   Int?
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model WeaponBrand {
  id        Int  @id @default(autoincrement())
  name      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  @@map("WeaponBrand")
}

enum Role {
  USER
  ADMIN
  GUEST
}

enum Status {
  EM_CONDICOES_DE_USO
  DEFEITO
  EM_MANUTENCAO
  INSERVIVEL
  DESTRUIDO
  DEVOLVIDO_AO_DAL
  EM_USO
  EM_REPARO
  EM_TRANSPORTE
  EM_ARMAZENAMENTO__NO_PAIOL
  EM_TESTE_DE_MANUTENCAO
  EM_INSTRUCAO
  NAO_LOCALIZADA
  EM_PERICIA
  A_DISPOSICAO_DA_JUSTICA
}

enum Caliber {
  CALIBRE_9MM
  CALIBRE_45
  CALIBRE_40
  CALIBRE_357
  CALIBRE_38
  CALIBRE_380
  CALIBRE_9
  CALIBRE_762
  CALIBRE_50
  CALIBRE_22
  CALIBRE_223
  CALIBRE_30
  CALIBRE_20
  CALIBRE_12
  CALIBRE_556
  CALIBRE_765
}
