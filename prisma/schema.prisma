generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions", "relationJoins"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [uuid_ossp(map: "uuid-ossp")]
}

model User {
  id              String        @id @default(uuid())
  mat             String?       @unique @db.Char(8)
  name            String
  createdAt       DateTime      @default(now())
  posto           String?
  email           String?       @unique
  password        String?
  role            Role        @default(USER)
  Appointment     Appointment[]
  Course          Course[]
  profile         Profile[]
  Sicknote        Sicknote[]
  Vacation        Vacation[]
  Profileunidade  Profileunidade[]
  AuditLog        AuditLog[]
  ProfileWeapons   ProfileWeapons[]

}

model Vacation {
  period      String?
  approved    Boolean?  @default(false)
  createdAt   DateTime  @default(now())
  belongsToId String
  finishAt    DateTime?
  startAt     DateTime?
  year        Int
  month       Int
  id          String    @id @default(uuid())
  bioId       String?
  belongsTo   User      @relation(fields: [belongsToId], references: [id])
  bio         Bio?      @relation(fields: [bioId], references: [id])
}

model Sicknote {
  id          Int      @id @default(autoincrement())
  InitialDate DateTime
  Days        Int?
  Cid         String?
  DoctorName  String?
  Obs         String?
  createdAt   DateTime @default(now())
  belongsToId String
  bioId       String?
  belongsTo   User     @relation(fields: [belongsToId], references: [id])
  bio         Bio?     @relation(fields: [bioId], references: [id])
}

model Profile {
  id           Int       @id @default(autoincrement())
  bio          String?
  photo        String?
  adress       String
  neighborhood String?
  city         String?
  phone        String
  state        String?
  cpf          String?
  serviceTime  DateTime? @db.Date
  workplace    String?
  belongsToId  String
  bithDate     DateTime? @db.Date
  belongsTo    User      @relation(fields: [belongsToId], references: [id])
}

model Course {
  id          Int      @id @default(autoincrement())
  InitialDate DateTime
  FinalDate   DateTime
  name        String?
  progress    Boolean  @default(false)
  createdAt   DateTime @default(now())
  belongsToId String
  bioId       String?
  belongsTo   User     @relation(fields: [belongsToId], references: [id])
  bio         Bio?     @relation(fields: [bioId], references: [id])
}

model Bio {
  id          String        @id @default(uuid())
  Number      Int?
  Year        Int?
  Month       Int?
  InitialDate DateTime   @db.Date
  FinalDate   DateTime   @db.Date
  name        String
  progress    Boolean    @default(false)
  createdAt   DateTime   @default(now())
  type        String?
  Course      Course[]
  Sicknote    Sicknote[]
  Vacation    Vacation[]
}

model Appointment {
  id                        Int                  @id @default(autoincrement())
  Date                      DateTime             @db.Date
  Service                   String
  progress                  Boolean              @default(false)
  createdAt                 DateTime             @default(now())
  belongsToId               String
  belongsToProffessionalsId Int?
  Specialities              String
  belongsTo                 User                 @relation(fields: [belongsToId], references: [id])
  belongsToProfessionals    HealthProfessionals? @relation(fields: [belongsToProffessionalsId], references: [id])
}

model HealthProfessionals {
  id           Int           @id @default(autoincrement())
  Service      String
  createdAt    DateTime      @default(now())
  Specialities String[]
  BirthDate    DateTime      @db.Date
  Name         String
  Appointment  Appointment[]
}

model Unidades {
  id              Int           @id @default(autoincrement())
  name            String?
  location        String? 
  cidades         String[]
  aisp            String[]
  risp            String? 
  Profileunidade  Profileunidade[]
}

model Profileunidade {
  id           Int           @id @default(autoincrement())
  belongsToId               String
  belongsToUnidadeId        Int
  belongsTo                 User                 @relation(fields: [belongsToId], references: [id])
  belongsToUnidade          Unidades             @relation(fields: [belongsToUnidadeId], references: [id])

}

model AuditLog {
  id                       Int       @id @default(autoincrement())
  action                   String
  model                    String
  modelId                  Int
  belongsToId              String
  ipAdress                 String
  createdAt                DateTime  @default(now())

  belongsTo                 User                 @relation(fields: [belongsToId], references: [id])
}

enum Role {
  USER
  ADMIN
  GUEST
}

model Weapons {
  id              Int           @id @default(autoincrement())
  model           String?
  type            String?
  serialNumber    String?
  location        String? 
  createdAt       DateTime  @default(now())
  ProfileWeapons   ProfileWeapons[]
}


model ProfileWeapons {
  id                        Int                  @id @default(autoincrement())
  belongsToId               String
  belongsToWeaponsId        Int
  InitialDate               DateTime             @db.Date
  valid                     Boolean              @default(false)
  createdAt                 DateTime             @default(now())
  belongsTo                 User                 @relation(fields: [belongsToId], references: [id])
  belongsToWeapons          Weapons              @relation(fields: [belongsToWeaponsId], references: [id])

}